<?php


/**
 * Process the AJAX request to send the test email
 *
 * @since 1.0.0
 * @param
 * @return
 */
function wp_mail_smtp_zm_ajax(){

    check_admin_referer( WP_MAIL_SMTP_ZM_NAMESPACE . '_test_email_nonce' );

    global $wp_mail_smtp_settings;

    if ( $wp_mail_smtp_settings['enable'] == 'no' ){

        $message = __( 'Please enable WP Mail SMPT ZM', WP_MAIL_SMTP_ZM_NAMESPACE );

    } else {

        // Make sure the PHPMailer class has been instantiated
        // (copied verbatim from wp-includes/pluggable.php)
        // (Re)create it, if it's gone missing
        if ( empty( $phpmailer ) ) {
            require_once ABSPATH . WPINC . '/class-phpmailer.php';
            require_once ABSPATH . WPINC . '/class-smtp.php';
            $phpmailer = new PHPMailer( true );
        }

        // Set up the mail variables
        $email = array(
            'to' => sanitize_email( $_POST['to'] ),
            'subject' => 'WP Mail SMTP ZM [' . $wp_mail_smtp_settings['mailer'] . ']',
            'message' => __('This is a test email generated by the WP Mail SMTP ZM WordPress plugin.', 'wp_mail_smtp')
            );

        // Send the test mail
        ob_start();
        $result = wp_mail( $email['to'], $email['subject'], $email['message'] );
        $debug = ob_get_clean();

        if ( $wp_mail_smtp_settings['mailer'] == "mailer" ){

            $debug = 'Sent via Mailer';

        }

        if ( $result ){
            $header = __( 'Success!', WP_MAIL_SMTP_ZM_NAMESPACE );
        } else {
            $header = __( 'Failed!', WP_MAIL_SMTP_ZM_NAMESPACE );
        }

        $message = '<div id="my-content-id" style="display:none;"><pre>' . $debug . '</pre></div>';
        $message .= sprintf( '%s <a href="#TB_inline?width=600&height=550&inlineId=my-content-id" class="thickbox">%s</a>',
            $header,
            __( 'View Log', WP_MAIL_SMTP_ZM_NAMESPACE )
            );

    }

    $data = array(
        'message' => sprintf( '<div id="sent_target" style="margin: 5px 0 15px;">%s</div>', $message ),
        );

    wp_send_json( $data );

}
add_action( 'wp_ajax_' . WP_MAIL_SMTP_ZM_NAMESPACE . '_ajax', 'wp_mail_smtp_zm_ajax' );


/**
 * Load admin scripts
 *
 * @since 1.0.0
 * @param
 * @return
 */
function wp_mail_smtp_zm_admin_scripts(){

    $screen = get_current_screen();

    add_thickbox();

    if ( $screen->id == 'settings_page_' . WP_MAIL_SMTP_ZM_NAMESPACE ){

        $handle = 'wp-mail-smtp-zm-script';

        wp_enqueue_script( $handle, WP_MAIL_SMTP_ZM_URL . 'assets/javascripts/admin.js', array('jquery'), WP_MAIL_SMTP_ZM_VERSION );

        wp_localize_script( $handle, '_' . WP_MAIL_SMTP_ZM_NAMESPACE, array(
            'sending' => __( 'Sending...', WP_MAIL_SMTP_ZM_NAMESPACE ),
            'before_set_preset' => __( 'Clear current form values, and set presets for: ', WP_MAIL_SMTP_ZM_NAMESPACE ),
            'after_set_preset' => __( 'Pre-sets are set, please update your username and password.', WP_MAIL_SMTP_ZM_NAMESPACE )
        ) );

    }
}
add_action( 'admin_enqueue_scripts', 'wp_mail_smtp_zm_admin_scripts' );


/**
 * Assign our settings, defaults, and values.
 *
 * @since 1.0.0
 *
 * @return An array of settings
 */
function wp_mail_smtp_zm_base_settings(){

    /**
     * For a full list see "Supported Field Types"
     */
    $settings = array(
        'wp_mail_smtp_zm' => array(
            'title' => __( '', WP_MAIL_SMTP_ZM_NAMESPACE ),
            'fields' => array(
                array(
                    'title' => __( 'General', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'header'
                    ),
                array(
                    'title' => 'Enable',
                    'type' => 'checkbox',
                    'std' => 'no'
                    ),
                array(
                    'title' => __( 'From Email', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'fancyText',
                    'desc' => __( 'You can specify the email address that emails should be sent from. If you leave this blank, the default email will be used.',  WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'placeholder' => get_bloginfo( 'admin_email' ),
                    'std' => get_bloginfo( 'admin_email' )
                    ),
                array(
                    'title' => __( 'From Name', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'fancyText',
                    'desc' => __( 'You can specify the name that emails should be sent from. If you leave this blank, the emails will be sent from WordPress.',  WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'placeholder' => get_bloginfo( 'name' ),
                    'std' => get_bloginfo( 'name' )
                    ),
                array(
                    'title' => __( 'Mailer', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'radio',
                    'std' => 'smtp',
                    'options' => array(
                        'smtp' => __( 'Send all WordPress emails via SMTP.', WP_MAIL_SMTP_ZM_NAMESPACE ),
                        'mailer' => __( 'Use the PHP mail() function to send emails.', WP_MAIL_SMTP_ZM_NAMESPACE )
                        )
                    ),
                array(
                    'title' => __( 'Return Path', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'checkbox',
                    'desc' => __( 'Return Path Set the return-path to match the From Email', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'std' => 'no'
                    ),

                // SMTP Options
                array(
                    'title' => __(  'SMTP Options', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'header',
                    'desc' => __( 'These options only apply if you have chosen to send mail by SMTP above.', WP_MAIL_SMTP_ZM_NAMESPACE )
                    ),
                array(
                    'title' => __( 'SMTP Host', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'fancyText',
                    'std' => 'localhost',
                    'placeholder' => __( 'localhost', WP_MAIL_SMTP_ZM_NAMESPACE )
                    ),
                array(
                    'title' => __( 'SMTP Port', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'fancyText',
                    'std' => '25',
                    'placeholder' => __( '25', WP_MAIL_SMTP_ZM_NAMESPACE )
                    ),
                array(
                    'title' => __( 'Encryption', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'radio',
                    'std' => 'none',
                    'options' => array(
                        'none' => __( 'No encryption.', WP_MAIL_SMTP_ZM_NAMESPACE ),
                        'ssl' => __( 'Use SSL encryption.', WP_MAIL_SMTP_ZM_NAMESPACE ),
                        'tls' => __( 'Use TLS encryption. This is not the same as STARTTLS. For most servers SSL, is the recommended option.', WP_MAIL_SMTP_ZM_NAMESPACE )
                        )
                    ),
                array(
                    'title' => __( 'Authentication', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'radio',
                    'options' => array(
                        'no' => __( 'No: Do not use SMTP authentication.', WP_MAIL_SMTP_ZM_NAMESPACE ),
                        'yes' => __( 'Yes: Use SMTP authentication.', WP_MAIL_SMTP_ZM_NAMESPACE )
                        ),
                    'desc' => __( 'If this is set to no, the values below are ignored.', WP_MAIL_SMTP_ZM_NAMESPACE )
                    ),
                array(
                    'title' => __( 'Username', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'fancyText',
                    ),
                array(
                    'title' => __( 'Password', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'fancyText',
                    'desc' => __( 'Once saved your password will be encrypted.', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'autocomplete' => 'off'
                    ),

                // Send Test Email
                array(
                    'title' => __(  'Send Test Email', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'header',
                    'desc' => __( 'An automated email will be sent.', WP_MAIL_SMTP_ZM_NAMESPACE )
                    ),
                array(
                    'title' => __( 'To', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'email',
                    'std' => get_bloginfo( 'admin_email' )
                    ),
                array(
                    'title' => __( 'Send', WP_MAIL_SMTP_ZM_NAMESPACE ),
                    'type' => 'button',
                    'std' => 'Send Test',
                    'extra' => 'data-send_test_button_nonce="'.wp_create_nonce( WP_MAIL_SMTP_ZM_NAMESPACE . '_test_email_nonce' ).'"',
                    'id' => 'send_test_button'
                    )
            )
        )
    );

        return $settings;

}


/**
 * Set the page title for this instance of Quilt
 *
 * @since 1.0.0
 */
function wp_mail_smtp_zm_settings_page_title( $title, $namespace ){

    return 'WP Mail SMTP ZM Settings';

}
add_filter( 'quilt_' . WP_MAIL_SMTP_ZM_NAMESPACE . '_page_title', 'wp_mail_smtp_zm_settings_page_title', 15, 2 );


/**
 * Set the page title for this instance of Quilt
 *
 * @since 1.0.0
 */
function wp_mail_smtp_zm_settings_menu_title( $title, $namespace ){

    return 'WP Mail SMTP ZM';

}
add_filter( 'quilt_' . WP_MAIL_SMTP_ZM_NAMESPACE . '_menu_title', 'wp_mail_smtp_zm_settings_menu_title', 15, 2 );


/**
 * Set the footer text for this instance of Quilt
 *
 * @since 1.0.0
 */
function wp_mail_smtp_zm_settings_footer(){

    return sprintf( '%s <a href="http://zanematthew.com/products/">%s</a>.', 'Thank you for using WP Mail SMTP ZM.', 'Feel free to view our products' );

}
add_filter( 'quilt_' . WP_MAIL_SMTP_ZM_NAMESPACE . '_footer', 'wp_mail_smtp_zm_settings_footer', 15, 2 );


/**
 * Encrypt the password
 *
 * @since 1.0.0
 * @param
 * @return
 */
function wp_mail_smtp_zm_password_sanitize( $value ){

    global $wp_mail_smtp_settings;

    if ( $value == $wp_mail_smtp_settings['password'] )
        return $value;

    // Oddly enough this filter is called twice
    remove_filter( 'quilt_' . WP_MAIL_SMTP_ZM_NAMESPACE . '_sanitize_password', 'wp_mail_smtp_zm_password_sanitize' );
    $encrypted = wp_mail_smtp_zm_encrypted( WP_MAIL_SMTP_ZM_NAMESPACE, $value );

    return $encrypted;

}
add_filter( 'quilt_' . WP_MAIL_SMTP_ZM_NAMESPACE . '_sanitize_password', 'wp_mail_smtp_zm_password_sanitize' );


/**
 * Encrypt the password.
 *
 * This by no means is 100% secure, it is only meant to encrypt the password in the database
 *
 * @since 1.0.0
 * @param $key      The key used to encrypt
 * @param $string   The string to be encrypted
 * @return Encrypted string
 */
function wp_mail_smtp_zm_encrypted( $key=null, $string=null ){

    return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($key), $string, MCRYPT_MODE_CBC, md5(md5($key))));

}


/**
 * Decrypt the password.
 *
 * @since 1.0.0
 * @param $key      The key used to encrypt
 * @param $string   The string to be encrypted
 * @return Decrypted string
 */
function wp_mail_smtp_zm_decrypted( $key=null, $encrypted=null ){

    return rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($key), base64_decode($encrypted), MCRYPT_MODE_CBC, md5(md5($key))), "\0");

}


function wp_mail_smtp_zm_settings_buttons(){ ?>
    <a href="#" class="" id="wp_mail_smtp_zm_gmail_preset" style="margin: 5px 0 0 20px; display: inline-block;"><?php _e( 'Gmail Pre-sets', WP_MAIL_SMTP_ZM_NAMESPACE ); ?></a>
<?php }
add_action( 'quilt_' . WP_MAIL_SMTP_ZM_NAMESPACE . '_after_left_buttons', 'wp_mail_smtp_zm_settings_buttons' );