<?php
/**
 * Plugin Name: Cronjob Scheduler
 * Description: Plugin to manage, edit and remove WP Cron tasks
 * Version: 1.0.8
 * Author: Motocom
 * Author URI: http://www.motocom.co.uk
 *
 * @author Motocom <technical@motocom.co.uk>
 * @license http://www.gnu.org/licenses/gpl.html GNU v3
 *
 */

// set timezone based on WordPress timezone settings
date_default_timezone_set(get_option('timezone_string'));

class CronjobScheduler {

    private
        $_schedules = array (),
        $_cronjobs = array (),
        $_notifications = array (),
        $_admin_page = null;

    const
        NOTIFICATION_UPDATED = 'updated',
        NOTIFICATION_ERROR = 'error';


    /**
     * Constructor class that provides basic setup information
     *
     * @return bool Returns true on completion
     */
    public function __construct () {

        // determine cronjobs path
        $cronjobs_include = __DIR__ . '/cronjobs.php';

        // create the $cronjobs_include file if it doesnt exist
        if(!file_exists($cronjobs_include)) {
            @file_put_contents(
                $cronjobs_include,
                "<?php \r\n/**\r\n * Cronjob Scheduler Include File\r\n *\r\n" .
                " * This page allows you to create Cronjob Scheduler custom actions\r\n" .
                " * through the WordPress admin. Actions can also be created within\r\n" .
                " * theme files or other PHP files throughout your WordPress install.\r\n *\r\n" .
                " * Do not edit this file unless you have a good understanding of PHP, \r\n" .
                " * saving this with invalid code can render your WordPress install inoperable\r\n" .
                " * until you can fix the issue using FTP or another file editing utility.\r\n" .
                "**/\r\n\r\n" .
                $this->sample_action_template('my_cronjob_action')
            );
        }

        // load in cronjobs.php file but its not essential
        @include($cronjobs_include);

        // get schedules from database
        $this->_schedules = get_option('cjs_schedules', array ());

        // create new schedules filter
        add_filter('cron_schedules', array($this, 'add_schedules_to_filter'));

        // add filter so we can determine what page we are on
        add_filter('current_screen', array($this, 'current_screen'));

        // setup the admin menu
        add_action('admin_menu', array($this, 'plugin_admin_menu'));

        // return true
        return true;
    }

    /**
     * Determine the current screen and
     * @return bool Returns true on completion
     */
    public function current_screen() {

        // get current screen info
        $current_screen = get_current_screen();

        // check to ensure we are on the settings page before handling certain things
        if($current_screen->id == 'settings_page_cronjob_scheduler') {

            // handle post if possible
            if(count($_POST)) $this->handle_post();

            // check if we can handle 'd'
            if(isset($_GET['d']) && $_GET['d'] == 'true') {
                $message = 'Great, thanks for the donation! We appreciate you supporting our work!';
                $this->set_notification(self::NOTIFICATION_UPDATED, $message);
            }
        }

        // return true on completion
        return true;
    }

    /**
     * Sets up the admin menu interface
     *
     * @return bool Returns result of add_options_page() method
     */
    public function plugin_admin_menu () {
        $this->_admin_page = add_options_page (
            'Cronjob Scheduler',
            'Cronjob Scheduler',
            'manage_options',
            'cronjob_scheduler',
            array ($this, 'admin_settings_page')
        );

        // run admin_head action for this page
        add_action('admin_head-' . $this->_admin_page, array($this, 'plugin_header'));

        return $this->_admin_page;
    }

    /**
     * Outputs information into the plugin header.
     * Styles, scripts, etc.
     */
    public function plugin_header() {
        echo '<style type="text/css">
                .wp-core-ui .button-red {
                    background-color: #AA2C2A;
                    border-color: #972725;
                    box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                    -o-box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                    -ms-box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                    -moz-box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                    -webkit-box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                }
                .wp-core-ui .button-red:hover, .wp-core-ui .button-red:focus {
                    background-color: #BD302E;
                    border-color: #972725;
                    box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                    -o-box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                    -ms-box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                    -moz-box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                    -webkit-box-shadow: inset 0 1px 0 rgba(198,70,68,.5),0 1px 0 rgba(0,0,0,.15);
                }
                .responsive-table {
                    width: 100%;
                    overflow-y: hidden;
                    overflow-x: scroll;
                    -ms-overflow-style: -ms-autohiding-scrollbar;
                    -webkit-overflow-scrolling: touch;
                }
              </style>';
    }

    /**
     * Register all schedules
     *
     * @param array $schedules Array of WordPress schedules
     */
    public function add_schedules_to_filter($schedules) {
        // loop through each schedule and add to $schedules
        foreach($this->_schedules as $name => $schedule) {
            $schedules[$name] = $schedule;
        }

        // return resulting array of $schedules
        return $schedules;
    }

    /**
     * Checks if the cron job setup has actually been completed or not
     *
     * @return bool Returns true if the wp cron appears to be configured
     */
    private function _cron_configured() {
        return (defined('DISABLE_WP_CRON'));
    }

    /**
     * Determines the friendly schedule name
     *
     * @return string The friendly name for a schedule
     */
    public function get_friendly_schedule_name($item_key) {

        // loop through all schedules and get the display name
        foreach(wp_get_schedules() as $key => $schedule) {
            if($item_key == $key) return $schedule['display'];
        }

        // we couldnt get it!
        return $item_key;
    }

    /**
     * Parses the crons into a format we can loop through
     * easily
     * @return array returns an array of cron jobs
     */
    public function parse_crons () {
        // loop through each cron job that WordPress has
        $i = 0; foreach(_get_cron_array() as $timestamp => $crons) {
            foreach($crons as $hook => $cron_args) {
                foreach($cron_args as $cron) {

                    // ignore crons that dont recur (created by WordPress or something else)
                    if(!isset($cron['interval'])) continue;

                    $this->_cronjobs[$i] = array (
                        'last_run'      => $timestamp,
                        'hook'          => $hook,
                        'schedule'      => $cron['schedule'],
                        'display_name'  => $this->get_friendly_schedule_name($cron['schedule']),
                        'interval'      => $cron['interval'],
                        'uniqid'        => md5($hook . $cron['schedule'])
                    );
                }
            }
            ++$i; // increment the count
        }

        // sort cron jobs by key and return them
        usort($this->_cronjobs, array($this, '_sort_crons'));
        return $this->_cronjobs;
    }

    /**
     * Sorts the crons into a particular order
     * @param  array $a Cron array 1
     * @param  array $b Cron array 2
     * @return int    Ordering integer
     */
    private function _sort_crons($a, $b) {
        // if they are the same, return 0
        if($a['hook'] == $b['hook']) return 0;

        // return 1 or -1
        return ($a['hook'] > $b['hook'] ? 1 : -1);
    }

    /**
     * Converts a string to slug format
     * @param  string $string String to convert
     * @param bool $allow_underscore Set to true to replace invalid chars with underscore
     * @return string         String converted to slug format
     */
    public function to_slug($string, $allow_underscore = false) {
        return rtrim(strtolower(trim(preg_replace('/[^A-Za-z0-9]+/', ($allow_underscore ? '_' : ''), $string))),'_');
    }

    /**
     * Returns the ideal cronjob string
     * @return string string
     */
    public function get_cron_string() {
        return
            '* * * * * wget -qO- &quot;' . esc_attr(get_bloginfo('wpurl')) .
            '/wp-cron.php?doing_wp_cron&quot; &>/dev/null';
    }

    /**
     * Returns an example cron action
     * @param  [type] $action_name [description]
     * @return [type]              [description]
     */
    public function sample_action_template($action_name) {

        // convert action to slug
        $action_name = $this->to_slug($action_name, true);

        // return created string
        return
            'function ' . $action_name .' () {' . "\r\n" .
            '    // code to execute on cron run' . "\r\n" .
            '} add_action(\'' . $action_name .'\', \'' . $action_name . '\');' . "\r\n";
    }

    /**
     * Handle plugin post requests
     * @return bool returns true on request
     */
    public function handle_post () {

        // verify the nonce field
        if(!wp_verify_nonce($_POST['scheduler_nonce'])) {
            // the nonce is invalid, return false
            $this->set_notification(self::NOTIFICATION_ERROR, 'Request could not be handled as it was invalid.');
            return false;
        }

        // attempt to delete an existing cronjob
        if(isset($_POST['delete'])) {

            // determine the $uniqid
            $uniqid = array_keys($_POST['delete'])[0];
            $deleted = false;

            // loop through each cron and find the match!
            if($attributes = $this->find_cron_by_uniqid($uniqid)) {
                // unschedule the event
                $deleted = true;
                wp_unschedule_event(wp_next_scheduled($attributes['hook']), $attributes['hook']);
            }

            // set the cronjobs array back to blank to avoid issues further down
            // the script
            $this->_cronjobs = array ();

            // output message and return true
            if($deleted) {
                $message = 'The action has been successfully unscheduled!';
                $this->set_notification(self::NOTIFICATION_UPDATED, $message);
            } else {
                $message = 'Unable to find the scheduled action. Please try again.';
                $this->set_notification(self::NOTIFICATION_ERROR, $message);
            }

            // return $deleted status
            return $deleted;

        } elseif(isset($_POST['trigger'])) {

            // get parameters
            $params = $_POST['trigger'];
            $uniqid = array_keys($params)[0];

            // find cron by the unique ID
            if($attributes = $this->find_cron_by_uniqid($uniqid)) {
                if(has_action($attributes['hook'])) {
                    // run the action
                    do_action($attributes['hook']);

                    // success, action run
                    $message = 'The action was successfully triggered.';
                    $this->set_notification(self::NOTIFICATION_UPDATED, $message);
                    return true;

                } else {
                    // the action doesnt exist
                    $message = 'The action \'' . $attributes['hook'] . '\' doesn\'t exist for this cronjob.';
                    $this->set_notification(self::NOTIFICATION_ERROR, $message);
                    return false;
                }
            } else {
                // the cron doesnt exist
                $message = 'Something went wrong, we couldn\'t find cronjob.';
                $this->set_notification(self::NOTIFICATION_ERROR, $message);
                return false;
            }

        } elseif(isset($_POST['cron'])) {

            $params = $_POST['cron'];

            if(!isset($params['method']) || !has_action($params['method'])) {

                // output error message because the method isnt valid
                $message = 'The cron action was invalid or does not exist. It is important that
                the action already exists before creating a new schedule.';
                $this->set_notification(self::NOTIFICATION_ERROR, $message);
                return false;

            } elseif(substr($params['method'], 0, 3) == 'wp_') {

                // check if this is a system reserved cron job
                $message = 'You cannot create cron jobs that have a function prefixed with
                <span style="font-family: monospace">wp_</span> as these are system reserved.';
                $this->set_notification(self::NOTIFICATION_ERROR, $message);
                return false;

            } elseif(!isset($params['schedule']) || !$this->get_friendly_schedule_name($params['schedule'])) {

                // output error message because the schedule isnt valid
                $this->set_notification(self::NOTIFICATION_ERROR, 'The specified cron schedule was invalid. Please choose a valid schedule.');
                return false;

            } else {

                // check to ensure this cron doesnt already exist
                $uniqid = md5($params['method'] . $params['schedule']);
                if($this->find_cron_by_uniqid($uniqid)) {
                    $message = 'Failed to create because a cronjob with this schedule already exists.';
                    $this->set_notification(self::NOTIFICATION_ERROR, $message);
                    return false;
                }
            }

            // validation passed, schedule the event to 60 seconds from now
            wp_schedule_event(time() - 60, $params['schedule'], $params['method']);
            $this->set_notification(self::NOTIFICATION_UPDATED, 'The cron has been scheduled successfully.');
            unset($_POST['cron']);
            return true;

        } elseif(isset($_POST['deleteschedule'])) {

            // delete the custom schedule
            $schedule_id = array_keys($_POST['deleteschedule']);
            $schedule_id = $schedule_id[0];

            // see if the schedule actually exists
            if(array_key_exists($schedule_id, $this->_schedules)) {
                // delete the schedule
                unset($this->_schedules[$schedule_id]);
                update_option('cjs_schedules', $this->_schedules);

                $message = 'The schedule was deleted.';
                $this->set_notification(self::NOTIFICATION_UPDATED, $message);
                return true;

            } else {
                // invalid schedule
                $message = 'The schedule could not be delete because we couldn\'t find it!';
                $this->set_notification(self::NOTIFICATION_ERROR, $message);
                return false;
            }


        } elseif(isset($_POST['schedule'])) {

            // create a new post schedule

            $params = $_POST['schedule'];

            // check to ensure the interval is numeric
            if(!is_numeric($params['interval']) || $params['interval'] == 0) {
                $message = 'The interval should be numeric and be the number of minutes between each run. It cannot be 0!';
                $this->set_notification(self::NOTIFICATION_ERROR, $message);
                return false;
            } else {
                $params['interval'] = $params['interval'] * 60;
            }

            // add to the schedules array
            $this->_schedules[$this->to_slug($params['display'] . '_' . $params['interval'])] = array (
                'interval' => $params['interval'],  // value was provided in seconds
                'display'  => $params['display']
            );

            // add the new schedules to WordPress option
            update_option('cjs_schedules', $this->_schedules);

            // if we get to this point, success!
            $message = 'A new schedule has been added.';
            $this->set_notification(self::NOTIFICATION_UPDATED, $message);
            return true;

        }
    }

    /**
     * Sets plugin notification messages
     * @param string $type    Type of notification (error or updated)
     * @param string $message The message to display to the user
     */
    public function set_notification($type, $message) {
        return $this->_notifications[$type] = $message;
    }

    /**
     * Finds cron based on uniqid
     * @param  string $uniqid Unique ID of the cronjob
     * @return array|bool         Array on success, false on failure
     */
    public function find_cron_by_uniqid($uniqid) {
        foreach($this->parse_crons() as $attributes) {
            if($uniqid == $attributes['uniqid']) {
                return $attributes;
            }
        }
        return false;
    }

    /**
     * Determines the location of the wp-config.php file
     * @return string returns absolute path to wp-config.php
     */
    public function get_wp_config_path() {

        // determine the current path
        $base = dirname(__DIR__);

        $path = dirname(dirname($base)) . '/wp-config.php';
        if(file_exists($path)) {
            // we have found the wp-config.php file
            return $path;
        } elseif(file_exists(dirname($path))) {
            // we have found the wp-config.php file
            return dirname($path);
        } else {
            return false;
        }
    }

    /**
     * Output notifications that have been generated by the script
     */
    public function output_notifications() {
        if(!count($this->_notifications)) return false;

        echo '<div id="notifications">';
        foreach($this->_notifications as $class => $value):
            echo '<div id="notif-flex" class="' . $class . '"><p><strong>' . $value . '</strong></p></div>';
        endforeach;
        echo '</div>';
    }

    /**
     * Outputs the admin settings page container
     *
     */
    public function admin_settings_page () {
        echo '<div class="wrap">';
            echo '<h2>Cronjob Scheduler</h2>';
            echo '<div id="poststuff">';
                echo '<div id="post-body" class="metabox-holder columns-2">';
                    echo $this->view_right_column();
                    echo '<div id="postbox-container-2" class="postbox-container">';

                        /* output any notifications */
                        $this->output_notifications();

                        /* begin actual page contents */
                        if(!$this->_cron_configured()) {
                            $this->view_plugin_misconfigured_page();
                        } else {
                            $this->view_plugin_settings_page();
                        }
                        /* end actual page contents */
                    echo '</div>';
                echo '</div>';
            echo '</div>';
        echo '</div>';
    }

    /**
     * Outputs message when the cron has not yet been properly configured
     */
    public function view_plugin_misconfigured_page () {
        echo '<p>For Cronjob Scheduler to run reliably, you need to disable the default WordPress
        cron job schedules and setup a unix cronjob. Please add the following to the end of your
        <span style="font-family: monospace">' .
        esc_html($this->get_wp_config_path() ? $this->get_wp_config_path() : 'wp-config.php') .
        '</span> file.</p>';

        echo '<blockquote><pre>define(&#39;DISABLE_WP_CRON&#39;, true);</pre></blockquote>';

        echo '<p>Once this has been added, this page will no longer be displayed. It is important
        that you also setup a cron job to run every minute, the recommended setting for your
        installation is: </p>';

        echo '<blockquote><pre style="word-wrap: break-word">' . $this->get_cron_string() . '</pre></blockquote>';
    }

    /**
     * Outputs list of cronjobs running on WordPress
     */
    public function view_plugin_settings_page () {
        echo '<p>Please use the section below to configure your recurring cron jobs. If you want to change an existing cron,
        you should delete the existing schedule and create a new one. Actions prefixed with
        <span style="font-family: Monospace">wp_</span> are system reserved and cannot be created or deleted.
        Due to the way WordPress handles cron jobs, it may take up to 2 minutes for a 1 minute cron to be executed.</p>';
        echo '<form method="POST" action="" class="responsive-table">';
            echo '<input type="hidden" name="scheduler_nonce" value="' . wp_create_nonce() . '" />';
            echo '<table class="widefat fixed">';
                echo '<thead>';
                    echo '<tr>';
                        echo '<th class="column" style="width: 180px"><strong>Cron Action</strong></th>';
                        echo '<th class="column" style="width: 80px"><strong>Action Exists</strong></th>';
                        echo '<th class="column" style="width: 100px"><strong>Run Schedule</strong></th>';
                        echo '<th class="column" style="width: 130px"><strong>Next Run</strong></th>';
                        echo '<th class="column" style="width: 80px"></th>';
                    echo '</tr>';
                echo '</thead>';
                echo '<tbody>';
                foreach($this->parse_crons() as $attributes):

                    $date_format = get_option('date_format') . ' ' . get_option('time_format');

                    echo '<tr>';
                        echo '<td class="column" style="white-space: nowrap"><input type="text" class="form-input-tip"
                            readonly="readonly" value="' . esc_attr($attributes['hook']) . '" style="font-family: Monospace; width: 100%"
                            onclick="this.focus(); this.select()" /></pre></td>';
                        echo '<td class="column">' . (has_action($attributes['hook']) ? 'Yes' : '<strong style="color: #FF0000">No</strong>') . '</td>';
                        echo '<td class="column">' . esc_html($attributes['display_name']) . '<br /><small>' .
                            number_format($attributes['interval']/60) . ' minutes</small></td>';
                        echo '<td class="column">' .
                            date($date_format, $attributes['last_run']) . '</td>';
                        echo '<td class="column"><input type="submit" name="trigger[' . esc_attr($attributes['uniqid']) . ']" value="Run"
                            class="button button-primary button-small" onclick="return confirm(\'Are you sure you want to run this now?\')" />' .
                            (substr($attributes['hook'], 0, 3) <> 'wp_' ?
                                ' <input type="submit" name="delete[' . esc_attr($attributes['uniqid']) . ']" value="Delete"
                                class="button button-primary button-red button-small" onclick="return confirm(\'Are you sure you want to delete this cron?\');" />' : null) . '</td>';
                    echo '</tr>';

                    unset($date_format);

                endforeach;

                    $schedule_function = (isset($_POST['cron']['method']) ? esc_attr($_POST['cron']['method']) : null);
                    $schedule_interval = (isset($_POST['cron']['schedule']) ? esc_attr($_POST['cron']['schedule']) : null);

                    echo '<tr>';
                        echo '<td class="column"><input type="text" class="form-input-tip"
                            style="font-family: Monospace; width: 100%" name="cron[method]" value="' . esc_attr($schedule_function) . '" autocomplete="off" /></td>';
                        echo '<td class="column"></td>';
                        echo '<td class="column"><select name="cron[schedule]">';
                        foreach(wp_get_schedules() as $key => $schedule):
                            echo '<option value="' . esc_attr($key) . '"' . ($schedule_interval == $key ? ' selected="selected"' : null) . '>' . esc_html($schedule['display']) . '</option>';
                        endforeach;
                        echo '</td>';
                        echo '<td class="column" colspan="2"><input type="submit"
                            value="Create Cronjob" class="button button-primary button-large" /></td>';
                    echo '</tr>';

                    unset($schedule_function, $schedule_interval);

                echo '</tbody>';
            echo '</table>';
        echo '</form>';

        echo '<h2>Action Template</h2>';
        echo '<p>You can use the template below to create a new cron action. In the example, the Cron Action would
        be called <span style="font-family: monospace">my_cronjob_action</span></p>';
        echo '<blockquote style="font-family: monospace">';
            echo '<span style="color: #000080; font-weight: bold">function</span> my_cronjob_action () {<br />';
                echo '<span style="color: #008800; font-style: italic">&nbsp;&nbsp;&nbsp;&nbsp;// code to execute on cron run</span><br />';
            echo '} add_action(<span style="color: #0000FF">&#39;my_cronjob_action&#39;</span>, <span style="color: #0000FF">&#39;my_cronjob_action&#39;</span>);';
        echo '</blockquote>';
        echo '<p>You can create custom actions by editing this plugins <span style="font-family: monospace">cronjobs.php</span> file. ';
        echo 'This plugin requires you to have an understanding of PHP, ';
        echo '<a href="' . admin_url('plugin-editor.php?file=cronjob-scheduler/cronjobs.php') . '">edit this file</a>.</p>';
    }

    /**
     * Display the right column
     *
     */
    public function view_right_column () {
        echo '<div id="postbox-container-1" class="postbox-container">';
            echo '<div id="side-sortables" class="meta-box-sortables ui-sortable">';
                echo '<div class="postbox">';
                    echo '<h3 class="hndle">Schedules</h3>';
                    echo '<div class="inside">';
                        echo '<form method="POST" action="">';
                            echo '<input type="hidden" name="scheduler_nonce" value="' . wp_create_nonce() . '" />';
                            echo '<table class="widefat fixed">';
                                echo '<thead>';
                                    echo '<tr>';
                                        echo '<th class="column"><strong>Name</strong></th>';
                                        echo '<th class="column"><strong>Minutes</strong></th>';
                                    echo '</tr>';
                                echo '</thead>';
                                echo '<tbody>';
                                foreach(wp_get_schedules() as $key => $schedule):
                                    echo '<tr>';
                                        echo '<td class="column">' . esc_html($schedule['display']) . '</td>';
                                        echo '<td class="column">' . number_format($schedule['interval']/60) .
                                            (array_key_exists($key, $this->_schedules) ? '<input type="submit" name="deleteschedule[' . esc_attr($key) . ']" class="button button-primary button-red button-small"
                                                style="float: right" value="Delete" onclick="return confirm(\'Are you sure you want to delete this schedule? This will stop tasks that use this schedule from working next time they run.\');" />' : null) .
                                            '</td>';
                                    echo '</tr>';
                                endforeach;
                                    echo '<tr>';
                                        echo '<td class="column">';
                                            echo '<input type="text" name="schedule[display]" class="form-input-tip" size="10" placeholder="Five Minutes" autocomplete="off" />';
                                        echo '</td>';
                                        echo '<td class="column">';
                                            echo '<input type="text" name="schedule[interval]" class="form-input-tip" size="9" placeholder="5" autocomplete="off" />';
                                        echo '</td>';
                                    echo '</tr>';
                                    echo '<tr>';
                                        echo '<td class="column" colspan="2" style="text-align: right">';
                                            echo '<input type="submit" name="save" class="button button-primary button-large" value="Add Schedule" />';
                                        echo '</td>';
                                    echo '</tr>';
                                echo '</tbody>';
                            echo '</table>';
                        echo '</form>';
                    echo '</div>';
                echo '</div>';
                echo '<div class="postbox">';
                    echo '<h3 class="hndle">Plugin Details</h3>';
                    echo '<div class="inside">';
                        echo '<p>This plugin was designed and built by <a href="http://www.motocom.co.uk"
                        target="_blank">Motocom</a>. It is designed to make easy work of creating and
                        managing custom cron jobs.</p>';
                        echo '<p>To make sure this plugin runs correctly, you need to create a unix cronjob
                        that runs <b>every minute</b>. The recommended settings for your installation
                        is:</p>';
                        echo '<input type="text" class="form-input-tip" readonly="readonly" value="' . $this->get_cron_string() .
                        '" style="font-family: monospace; width: 100%"
                        onclick="this.focus(); this.select()" />';
                        echo '<p>You may have to change the above depending on your setup. If this plugin has
                        been helpful for you, then please donate to keep our projects running!</p>';
                        echo '<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top" style="text-align: center">
                                <input type="hidden" name="cmd" value="_donations">
                                <input type="hidden" name="business" value="Z4JTTVD8EFLGN">
                                <input type="hidden" name="lc" value="GB">
                                <input type="hidden" name="item_name" value="WordPress Plugin - Cronjob Scheduler">
                                <input type="hidden" name="item_number" value="wordpress_cronjob_scheduler">
                                <input type="hidden" name="no_note" value="1">
                                <input type="hidden" name="no_shipping" value="2">
                                <input type="hidden" name="rm" value="1">
                                <input type="hidden" name="return" value="' . esc_attr(admin_url('/options-general.php?page=cronjob_scheduler&d=true')) . '">
                                <input type="hidden" name="cancel_return" value="' . esc_attr(admin_url('/options-general.php?page=cronjob_scheduler&d=false')) .'">
                                <input type="hidden" name="currency_code" value="GBP">
                                <input type="hidden" name="bn" value="PP-DonationsBF:btn_donate_LG.gif:NonHosted">
                                <input type="image" src="https://www.paypalobjects.com/en_GB/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="PayPal – The safer, easier way to pay online.">
                                <img alt="" border="0" src="https://www.paypalobjects.com/en_GB/i/scr/pixel.gif" width="1" height="1">
                        </form>';
                    echo '</div>';
                echo '</div>';
            echo '</div>';
        echo '</div>';
    }
}

// create a new instance of the CronjobScheduler
$oCJS = new CronjobScheduler();